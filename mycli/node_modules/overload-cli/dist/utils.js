"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreviewTempDirname = exports.OutputDirname = exports.OriginDirname = exports.setCommonDirnames = exports.concatOriginUrl = exports.sleep = exports.loggerSpinning = exports.loggerError = exports.loggerEnd = exports.loggerStart = void 0;
const { resolve } = require('path');
const { existsSync, mkdirSync } = require('fs');
const ora = require('ora');
const logger = (logInfo, type, failureMsg) => {
    let info = '';
    if (type === 'start') {
        info = `=> 开始任务：${logInfo}`;
    }
    if (type === 'end') {
        info = `✨ 结束任务：${logInfo}`;
    }
    if (type === 'error') {
        info = `💣 任务失败：${logInfo}`;
    }
    const nowDate = new Date();
    console.log(`[${nowDate.toLocaleString()}.${nowDate
        .getMilliseconds()
        .toString()
        .padStart(3, '0')}] ${info}
    `);
    if (type === 'error' && failureMsg) {
        console.log(`✨ 失败原因：${failureMsg}`);
    }
};
const loggerStart = (logInfo) => logger(logInfo, 'start');
exports.loggerStart = loggerStart;
const loggerEnd = (logInfo) => logger(logInfo, 'end');
exports.loggerEnd = loggerEnd;
const loggerError = (logInfo, failureMsg) => logger(logInfo, 'error', failureMsg);
exports.loggerError = loggerError;
async function loggerSpinning(title, runFn) {
    const nowDate = new Date();
    const spinner = ora(`[${nowDate.toLocaleString()}.${nowDate.getMilliseconds().toString().padStart(3, '0')}] ${title}\n`);
    spinner.start();
    const response = await runFn();
    spinner.succeed();
    return response;
}
exports.loggerSpinning = loggerSpinning;
const sleep = (duration) => {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve();
        }, duration);
    });
};
exports.sleep = sleep;
const concatOriginUrl = (originURL, path, routeMode = 'hash') => {
    if (routeMode === 'hash') {
        if (originURL[originURL.length - 1] !== '/' && !originURL.endsWith('.html')) {
            originURL += '/';
        }
        originURL += `#${path}`;
    }
    else {
        if (originURL[originURL.length - 1] === '/') {
            originURL = originURL.substr(0, originURL.length - 1);
        }
        originURL += path;
    }
    return originURL;
};
exports.concatOriginUrl = concatOriginUrl;
let OriginDirname = '';
exports.OriginDirname = OriginDirname;
let OutputDirname = '';
exports.OutputDirname = OutputDirname;
let PreviewTempDirname = '';
exports.PreviewTempDirname = PreviewTempDirname;
const setCommonDirnames = () => {
    const loggerTitle = '初始化';
    loggerStart(loggerTitle);
    exports.OriginDirname = OriginDirname = process.cwd();
    exports.OutputDirname = OutputDirname = resolve(OriginDirname, 'overload-cli-output');
    if (!existsSync(OutputDirname)) {
        mkdirSync(OutputDirname);
    }
    exports.PreviewTempDirname = PreviewTempDirname = resolve(__dirname, 'overload-cli-temp');
    if (!existsSync(PreviewTempDirname)) {
        try {
            mkdirSync(PreviewTempDirname);
        }
        catch (error) {
            loggerError(loggerTitle, '权限不够！请使用 sudo 运行当前命令！');
            return false;
        }
    }
    loggerEnd(loggerTitle);
    return true;
};
exports.setCommonDirnames = setCommonDirnames;
